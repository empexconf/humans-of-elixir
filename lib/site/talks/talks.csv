event,title,slug,youtube,description,speaker_name,speaker_slug,speaker_company,speaker_bio,speaker_twitter
la_conference_2019,Five Easy Ways To Start With Nerves,five-easy-ways-nerves,,"Writing code that touches the real world is a magical experience. Nerves makes the software more approachable and much more powerful. Come see five fun projects that you can build from beginning to end without reading spec sheets or thinking about capacitors. From a garage controller, to LEDs and sprinkler controllers there are a lot of cool things you can build from scratch.",Michael Ries,michael-ries,,,mmmries
la_conference_2019,Where did I put my data?,where-do-i-put-my-data,,"A look at how Amnesia's Elixir wrapper over Erlang's Mnesia distributed DBMS can be used to keep your application state in a scalable resilient manner. We will start by looking at Agents and GenServers as they are primarily the first thing people reach for when storing state. From there we will show how we can gain performance, remove bottlenecks, and increase stability by using ETS. Finally we examine how a more robust Amnesia solution can help systems scale beyond a single node, allowing the system to not only support higher loads but increase resiliency.",Alex Peachey,alex-peachey,,,alex_peachey
la_conference_2019,Elixir and Datadog,elixir-and-datadog,,"Having an Elixir application deployed it's crucial to have good insight into your architecture for multiple reasons. High level of observability helps you scale, improve your system's performance, optimise, debug and decide how to develop your product further.Good understanding of what your system is doing is even more important when it grows in time and uses more and more third party components that you don't have much influence over.

In my presentation I'm going to share my experience with integrating a significantly large Elixir system, with a state of the art monitoring service - Datadog. I'm going to explain how various features it offers, like metrics, live tracing, logging and analysis tools helped find number of non-obvious bottlenecks in the code.",Ludwik Bukowski,ludwik-bukowski,,,ludwikbukowski
la_conference_2019,Lessons From Our First Trillion Messages with Flow,first-trillion-flow,,"For many of us recent Elixir converts, our initial attraction to Elixir was rooted in the promise of access to the BEAM concurrency model.

While this has been possible in Elixir from day one, Flow has made it incredibly easy to build highly concurrent and parallel data pipelines utilizing the BEAM. The problem is that while the docs are great, there aren't many resources about running Flow-based systems in production.

In this talk I'll share some of the lessons my team has learned from processing our first trillion messages through Flow. You'll leave with practical knowledge you can directly apply to your applications.

For the last year, my team & I have been using Flow to power a reactive, high volume and mission-critical data processing pipeline. In that time we've recognized some patterns and techniques to keep our system easy to reason about while also being flexible to handle a variety of requirements.",John Mertens,john-mertens,,,
la_conference_2019,Fake It 'Til You Make It (where it = Haskell expertise),fake-it-til-you-make-it-haskell,,"In 2016, Magazine X asked Position Development to expand their existing Haskell app. Instead of only serving ecommerce forms via iframes in their WordPress website, their Haskell app would serve everything, including every article from the magazine and blog. Magazine X editors would continue to use WordPress to write and edit articles, but the Haskell server would request content through the WordPress JSON API and render templates. The magazine also wanted several new subscription, mailing list, and donation features. Early into the project, the original creator of the app left Position to begin a career in research. I was suddenly the most experienced Haskell developer on my team, while I still had less than a year of professional experience in tech. In this talk, I'll discuss both a) the technical aspects of the work and b) what it was like to try to make it all happen as part of a very small team of non-expert Haskellers. Some of the topics I'll touch on include:

- Larceny, our HTML templating language
- Offset, our library for rendering content from JSON APIs
- Position's workflow for developing, testing, and deploying Haskell apps
- Feeling disconnected from the larger language community, struggling with imposter syndrome, and continuing to learn and grow as a functional programmer 

In 2017, Magazine X relaunched with a bold new website. Getting to launch was a bit rocky, but for the past year we've been able to continue integrating more new features and designs into a fast, secure, and mobile-friendly Haskell app.
",Libby Horacek,libby-horacek,,,horrorcheck
la_conference_2019,Making your Elixir API Accessible to non-Elixir developers,elixir-api-accessible,,"This talk will describe tools, application best practices, and team collaboration tips that make consuming and working with an Elixir API easier for those not familiar with Elixir. I will talk about how I went from programing in only Javascript to working full stack at Versus Systems, what things we did to inspire engineers to work full stack. Some topics I will explore are useful testing, documentation, and scripts, as well as application organization, and effective teamwork.",Kalisa Falzone,kalisa-falzone,Versus Systems,,KalisaFalzone
la_conference_2019,You might say I have ðŸ•¶ mix feelings,mix-feelings,,"Yes, Elixirâ€™s great, itâ€™s based on Erlang, making it fault tolerant and scalable. But a few months with it day-to day, am I still singing its praises?",Aaron Harpole,aaron-harpole,,,haarpa01
la_conference_2019,Handling Null in Functional Programming,handling-null-functional-programming,,"Nulls are a fact of lifeâ€”sometimes a value can be absent, which is important information to have However if a variable can be null, we often have to write extra code to handle that possibility. How can we utilize functional, typed languages to only allow null where it communicates important information and eliminate it everywhere else? This talk will identify patterns to do just that and discuss how they can help shape your applicationâ€™s architecture.",Evelyn Masso,evelyn-masso,GitHub,,outofambit
la_conference_2019,Elixir Code is Elixir! Metaprogramming and Elixir,elixir-code-is-elixir-metaprogramming,,"Elixir is a programming language that has become dear to me as it has become my go-to choice for most of the things at work and personal projects. One thing that people notice when getting started with Elixir is that, in fact, a good chunk of it is written in Elixir. Now you might be thinking, ""Wait. What? How can that be?"". Well, the short answer is: metaprogramming.

Metaprogramming doesnâ€™t have to be too scary to think about and itâ€™s not so bad at all. Iâ€™ll show examples of the standard library where functionality is written in Elixir and I will also dive into extending Elixir by writing our own macros. But by also diving into the Elixir-lang code base we can explore the bootstrap process and see how you can start implementing Elixir in Elixir.",Adrian Cruz,adrian-cruz,,,drincruz
la_conference_2019,Go vs Elixir:  A concurrency comparison,go-vs-elixir,,"As software engineers we often are looking for the best tool for the job. Yet what about when languages appear similar? What then?

In this talk we will compare Go and Elixir. These languages have similar principles but make core tradeoffs that affect when one might use them. We will specifically compare their concurrency paradigms to see what tool we might use when.","[""Anna Neyzberg"",""Hannah Howard""]","[""anna-neyzberg"",""hannah-howard""]","[""Carbon Five"", ""Carbon Five""]","["""",""""]","[""aneyzb"",""techgirlwonder""]"
la_conference_2019,Rebuilding a BDD Testing Framework (ESpec): Foundations in Metaprogramming ,rebuilding-bdd-testing-framework,,"You're a Test-Driven Development disciple, but you're a little iffy on this whole metaprogramming thing and it's something you don't feel comfortable using in your day to day programming.

If you've looked through the ExUnit codebase, or its RSpec-inspired cousin, ESpec (RSpec is a Ruby on Rails testing framework), you've probably noticed the defmacro keyword. That's because these test frameworks make use of metaprogramming to give you those lovely DSL's.

Don't know what the defmacro keyword does? Don't worry.

Even if you've never used Elixir's metaprogramming features before, come learn how to do it by seeing a real-life application of them. During this talk, we will rebuild a small part of our own version of ESpec. We'll duck and weave through Elixir's basic metaprogramming features all while building out test assertions and error messages, and you'll gain a whole new appreciation for metaprogramming.",Bruce Park,bruce-park,Versus Systems,"Bruce currently works as a developer at a company called Versus Systems based in Los Angeles, California. He occasionally contributes to Elixir open source libraries such as ESpec, a popular testing framework. In his spare time, he likes reading Tom Clancy novels and swimming along with a cup of coffee.",bpark0
la_conference_2018,Opening Keynote,2018-opening-keynote,,,Emma Cunningham,emma-cunningham,,,
la_conference_2018,Life is but a Stream,life-is-but-a-stream,,A overview and dive into the Stream module. When should you use it over Enum? What are the pros and cons of using Stream for your day-to-day tasks? How are some of the functions implemented? We'll go into those questions and find some answers together.,Geoffrey Lessel,geoffrey-lessel,,,
la_conference_2018,Building beautiful systems with Phoenix contexts and Domain-Driven Design,phoenix-contexts-and-ddd,,"Phoenix contexts are a powerful code organization tool - but without a clear idea of what business domains live under the hood of your systems, naively creating contexts leads to over-engineered, fragile systems.

Today, weâ€™ll learn about the philosophical roots of Bounded Contexts from the hard-earned wisdom of Domain-Driven Design. Weâ€™ll quickly get our hands dirty in the nuts and bolts of a Context Mapping exercise, a strategic design tool that reveals domain-specific system boundaries. With our newfound architectural vision, weâ€™ll learn how to write context-driven Phoenix code and develop some organizational rules around communication, boundary enforcement and testing between contexts. Weâ€™ll leverage the unique powers of Elixir that make this style of architecture so natural and see how using contexts easily leads to highly-cohesive and loosely-coupled outcomes!",Andrew Hao,andrew-hao,,,
la_conference_2018,Become a Hex Power User,become-a-hex-power-user,,"We all use Hex every day on our Elixir projects, but how many of us really know everything Hex can do and how it works? Taking a deep dive into the Hex internals will show you some tips and tricks you can use on a future project.",Todd Resudek,todd-resudek,,,
la_conference_2018,Adoption Panel,adoption-panel,,"This panel will discuss strategies for increasing Elixir adoption in your organization, and then take questions.","[""Shanti Chellaram"",""Brandon Richey""]","[""shanti-chellaram"",""brandon-richey""]","["""",""""]","["""",""""]","["""",""""]"
la_conference_2018,Deployment Panel,deployment-panel,,"This panel will discuss their elixir deployment strategies, and then take questions.","[""Desmond Bowe"",""Benjamin Brodie"",""Scott Taylor""]","[""desmond-bowe"",""benjamin-brodie"",""scott-taylor""]","["""","""",""""]","["""","""",""""]","["""","""",""""]"
la_conference_2018,Ecto.Schema without Ecto.Repo,ecto-schema-without-ecto-repo,BP-f3Kcqb1A,"With newer versions of Ecto you can use Ecto.Schema without even importing Ecto.Repo or setting up a traditional database.  Why would you wish to?

Your microservice or other lightweight app may not use a database but you'll probably still need to wrangle some serious data: complex params, JSON request/response bodies, RabbitMQ payloads, etc.  That's data that you'll need to parse, cast, and validate.

I'll step you through how to use Ecto.Schema on its own to cast and validate various kinds of data, and how to extract the final results whether the data is valid or invalid.

I'll also discuss some of the stumbling blocks and limitations I've encountered while leveraging Ecto.Schema in this way.",Rosemary Ledesma,rosemary-ledesma,RentPath LLC,"Rosemary is passionate about writing software with Elixir and Phoenix, and works as a back-end software engineer for RentPath LLC. In her spare time she enjoys hiking, swing-dancing, and rowing (crew).",
la_conference_2018,Shipping a Replacement Architecture in Elixir,shipping-replacement-architecture-in-elixir,,"This talk will be a deep dive of how we spent the last 4 months replacing our Rails API and various Node.JS microservices with a single Elixir Umbrella Application. Weâ€™ve gone from no Elixir in production to replacing all but one of our services with it and launching and running those to power our Enterprise SaaS startup with hundreds of thousands of users.

During this talk weâ€™ll walk through:

* Application structure inside of the Umbrella (includes 3 separate Phoenix applications inside of it).
* How we modeled our async event bus powered by GenStage
* How we leveraged Flow to parallelize the syncing of millions of database records in record time
* Deploying our various services to ECS via Docker
* Monitoring and stat-ing our services
* Problems we encountered during the road to production
* The huge wins we got!

Weâ€™ll really dig into the real-world requirements of shipping and running a complex Elixir application with many moving parts; we'll be concentrated on the high level, with a few little dips into some specific parts of the app.",Chris Bell,chris-bell,,,
la_conference_2018,A swarm of processes - simulating ant foraging behavior with OTP,swarm-of-processes,NKJFL9LpP4M,"In this talk, we'll see a simulation of a foraging ant colony that can efficiently solve mazes, built using a separate OTP process for each ant. Along the way we'll look at GenServers, dynamic Supervisors, Registries, and more OTP goodness. Weâ€™ll also learn a little bit about ants!",Will Ockelmann-Wagner,will-wow,Carbon Five,"Will is a software developer at Carbon Five. He started his career in accounting, but found that automating his job away was more fun than the actual job, and moved over to software. Heâ€™s into typed functional programming and tiny keyboards.",WowItsWillWow